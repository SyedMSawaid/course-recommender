// <auto-generated />
using System;
using API.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace API.Data.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20210217113124_FixedRelationships")]
    partial class FixedRelationships
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "5.0.3");

            modelBuilder.Entity("API.Entity.AppUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<byte[]>("PasswordHash")
                        .HasColumnType("BLOB");

                    b.Property<byte[]>("PasswordSalt")
                        .HasColumnType("BLOB");

                    b.Property<string>("UserName")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasDiscriminator<string>("Discriminator").HasValue("AppUser");
                });

            modelBuilder.Entity("API.Entity.Course", b =>
                {
                    b.Property<string>("CourseId")
                        .HasColumnType("TEXT");

                    b.Property<string>("CourseDescription")
                        .HasColumnType("TEXT");

                    b.Property<string>("CourseName")
                        .HasColumnType("TEXT");

                    b.Property<int?>("TopicId")
                        .HasColumnType("INTEGER");

                    b.HasKey("CourseId");

                    b.HasIndex("TopicId");

                    b.ToTable("Courses");
                });

            modelBuilder.Entity("API.Entity.DiscussionBoard", b =>
                {
                    b.Property<int>("DiscussionBoardId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("CourseId")
                        .HasColumnType("TEXT");

                    b.HasKey("DiscussionBoardId");

                    b.ToTable("DiscussionBoards");
                });

            modelBuilder.Entity("API.Entity.Enrollment", b =>
                {
                    b.Property<int>("EnrollmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("CourseId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("CourseId1")
                        .HasColumnType("TEXT");

                    b.Property<int>("StudentId")
                        .HasColumnType("INTEGER");

                    b.HasKey("EnrollmentId");

                    b.HasIndex("CourseId1");

                    b.HasIndex("StudentId");

                    b.ToTable("Enrollments");
                });

            modelBuilder.Entity("API.Entity.Question", b =>
                {
                    b.Property<int>("QuestionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("DiscussionBoardId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Query")
                        .HasColumnType("TEXT");

                    b.HasKey("QuestionId");

                    b.HasIndex("DiscussionBoardId");

                    b.ToTable("Questions");
                });

            modelBuilder.Entity("API.Entity.Reply", b =>
                {
                    b.Property<int>("ReplyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Answer")
                        .HasColumnType("TEXT");

                    b.Property<int>("QuestionId")
                        .HasColumnType("INTEGER");

                    b.HasKey("ReplyId");

                    b.HasIndex("QuestionId");

                    b.ToTable("Replies");
                });

            modelBuilder.Entity("API.Entity.Topic", b =>
                {
                    b.Property<int>("TopicId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("TopicName")
                        .HasColumnType("TEXT");

                    b.HasKey("TopicId");

                    b.ToTable("Topics");
                });

            modelBuilder.Entity("CourseCourse", b =>
                {
                    b.Property<string>("PreRequisiteToCourseId")
                        .HasColumnType("TEXT");

                    b.Property<string>("PreRequisitesCourseId")
                        .HasColumnType("TEXT");

                    b.HasKey("PreRequisiteToCourseId", "PreRequisitesCourseId");

                    b.HasIndex("PreRequisitesCourseId");

                    b.ToTable("CourseCourse");
                });

            modelBuilder.Entity("API.Entity.Student", b =>
                {
                    b.HasBaseType("API.Entity.AppUser");

                    b.Property<string>("Address")
                        .HasColumnType("TEXT");

                    b.Property<string>("Contact")
                        .HasColumnType("TEXT");

                    b.Property<string>("StudentId")
                        .HasColumnType("TEXT");

                    b.HasDiscriminator().HasValue("Student");
                });

            modelBuilder.Entity("API.Entity.Teacher", b =>
                {
                    b.HasBaseType("API.Entity.AppUser");

                    b.Property<string>("TeacherId")
                        .HasColumnType("TEXT");

                    b.HasDiscriminator().HasValue("Teacher");
                });

            modelBuilder.Entity("API.Entity.Course", b =>
                {
                    b.HasOne("API.Entity.Topic", null)
                        .WithMany("Course")
                        .HasForeignKey("TopicId");
                });

            modelBuilder.Entity("API.Entity.Enrollment", b =>
                {
                    b.HasOne("API.Entity.Course", "Course")
                        .WithMany("Enrollments")
                        .HasForeignKey("CourseId1");

                    b.HasOne("API.Entity.Student", "Student")
                        .WithMany("Enrollments")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("API.Entity.Question", b =>
                {
                    b.HasOne("API.Entity.DiscussionBoard", "DiscussionBoard")
                        .WithMany("Questions")
                        .HasForeignKey("DiscussionBoardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DiscussionBoard");
                });

            modelBuilder.Entity("API.Entity.Reply", b =>
                {
                    b.HasOne("API.Entity.Question", "Question")
                        .WithMany("Replies")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Question");
                });

            modelBuilder.Entity("CourseCourse", b =>
                {
                    b.HasOne("API.Entity.Course", null)
                        .WithMany()
                        .HasForeignKey("PreRequisiteToCourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("API.Entity.Course", null)
                        .WithMany()
                        .HasForeignKey("PreRequisitesCourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("API.Entity.Course", b =>
                {
                    b.Navigation("Enrollments");
                });

            modelBuilder.Entity("API.Entity.DiscussionBoard", b =>
                {
                    b.Navigation("Questions");
                });

            modelBuilder.Entity("API.Entity.Question", b =>
                {
                    b.Navigation("Replies");
                });

            modelBuilder.Entity("API.Entity.Topic", b =>
                {
                    b.Navigation("Course");
                });

            modelBuilder.Entity("API.Entity.Student", b =>
                {
                    b.Navigation("Enrollments");
                });
#pragma warning restore 612, 618
        }
    }
}
